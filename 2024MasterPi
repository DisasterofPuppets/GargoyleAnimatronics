#!/usr/bin/env python
# -*- coding: utf-8 -*-

#Libraries
import socket    #https://wiki.python.org/moin/UdpCommunication
import logging

#Parameters
localPort=8888
bufferSize=1024
import busio
from adafruit_motor import servo
from adafruit_pca9685 import PCA9685
import board
import busio
import time
import threading

#Objects
sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)  ## Internet,UDP

i2c = busio.I2C(board.SCL, board.SDA)
pca = PCA9685(i2c)
pca.frequency = 50

#SERVO array for startup / testing
#PW based on motor specs sheets
servos = [
servo.Servo(pca.channels[0], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[1], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[2], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[3], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[4], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[5], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[6], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[7], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[8], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[9], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[10], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[11], min_pulse=500, max_pulse=2500), #MG996R Servrvo
servo.Servo(pca.channels[12], min_pulse=500, max_pulse=2500), #MG996R Servo
servo.Servo(pca.channels[13], min_pulse=500, max_pulse=2500), #DS3240 Servo
servo.Servo(pca.channels[14], min_pulse=500, max_pulse=2500), #DS3240 Servo
servo.Servo(pca.channels[15], min_pulse=500, max_pulse=2500), #DS3240 Servo
]
#for direct access by name

lLidTop = servos[0]
lLidBot = servos[1]
lEyeLeft = servos[2]
lEyeRight = servos[3]
lEyeUp = servos[4]
lEyeDown = servos[5]
rLidTop = servos[6]
rLidBot = servos[7]
rEyeLeft = servos[8]
rEyeRight = servos[9]
rEyeUp = servos[10]
rEyeDown = servos[11]
wingMid = servos[12]
wingLeft = servos[13]
wingRight = servos[14]
neck = servos[15]

logging.basicConfig(filename='udp_server.log', level=logging.DEBUG)

# Log events
logging.info('Server started')

#Servo fine tuning (MAY NO LONGER BE REQUIRED. ...180 is all the way forward / (slack on the string) 0 pulls the string tight
midMin = 82
midMax = 20
LexMin = 0
LexMax = 80
LeyMin = 65
LeyMax = 120
RexMin = 0
ReyMax = 0
LlidTMin = 90
LlidTMax = 180
LlidBMin = 90
LlidBMax = 180

#global variables
xpos = 0
ypos = 0
mod1 = 0
mod2 = 0
mod3 = 0
mod4 = 0
wingXToggle = False
wingYToggle = False

#180 servo sweep test

def servotest():
    print("Sweep from 0 to 180")
    for i in range(180):
        for servo_obj in servos:
            servo_obj.angle = i
        time.sleep(0.01)
        
    print("Sweep from 180 to 0")
    for i in range(180):
        for servo_obj in servos:
            servo_obj.angle = 180 - i
        time.sleep(0.01)

####################################### INITIALISE SERVOS
def startup():
	print(f"Initialising Servos")
	#REPLACE THESE VALUES WITH THE MIN MAX VARABLES^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^OR use html config...to be coded
	
	lLidTop.angle = 0
	lLidBot.angle = 0
	lEyeLeft.angle = 90
	lEyeRight.angle = 90
	lEyeUp.angle = 90
	lEyeDown.angle = 90
	rLidTop.angle = 0
	rLidBot.angle = 0
	rEyeLeft.angle = 0
	rEyeRight.angle = 0
	rEyeUp.angle = 0
	rEyeDown.angle = 0
	wingMid.angle = 0
	wingLeft.angle = 0
	wingRight.angle = 0
	neck.angle = 0
	time.sleep(5)
	
	


################################################# READ THE UDP DATA ####################################

def init():
    try:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        sock.bind(('', localPort))
        print("UDP server : {}:{}".format(get_ip_address(), localPort))

        while True:
            data, addr = sock.recvfrom(bufferSize)
            print("Received message: {} from {}\n".format(data, addr))

            # Split the data string into a list
            data_list = data.decode('utf-8').split(',')

            try:
                # Assign the values to your variables
                global xpos, ypos, mod1, mod2, mod3, mod4
                xpos, ypos = map(int, data_list[:2])
                mod1, mod2, mod3, mod4 = map(str, data_list[2:])

                
                #print(f"Received data_list: {data_list}")

                # Print the variables to check
                print(f"xpos: {xpos}\n"
                      f"ypos: {ypos}\n"
                      f"mod1: {mod1}\n"
                      f"mod2: {mod2}\n"
                      f"mod3: {mod3}\n"
                      f"mod4: {mod4}")

                sock.sendto("RPi received OK".encode(), addr)  # Write data back to the client

            except ValueError as ve:
                print(f"Error converting data to integers: {ve}")

    except Exception as e:
        print(f"Error in UDP server: {e}")



# function get_ip_address 
def get_ip_address():
    """get host ip address"""
    ip_address = '';
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8",80))
    ip_address = s.getsockname()[0]
    s.close()
    return ip_address

############################## EYE MOVEMENT ########################
def eyemovement():
    print(f"Controlling Eyes")
    global xpos, ypos, mod1, mod2, mod3,mod4
    
    while mod1 == "OFF" and mod2 == "OFF" and mod3 == "OFF" and mod4 == "OFF":
        # Map joystick value to servo position
        mapped_position = int((xpos - 0) * (720 - 710) / (1023 - 0) + 710)
        
        mapped_position = max(min(mapped_position, 180), 0)
        
        # Update left eye servo
        lEyeLeft.angle = mapped_position

        # Mirror the position for the right eye servo
        mirrored_position = 180 - mapped_position
        lEyeRight.angle = mirrored_position

        time.sleep(0.1)  # Adjust the sleep time as needed to control the speed of the servo movements


#---------------------------BLINK-----------------------

def blinker():
	global mod1, mod2, mod3, mod4
	print("Blinking....")
	lLidTop.angle = 180
	lLidBot.angle = 180
	rLidTop.angle = 180
	rLidBot.angle = 180
	time.sleep(50 / 1000)
	lLidTop.angle = 135
	lLidBot.angle = 145
	rLidTop.angle = 135
	rLidBot.angle = 145
	time.sleep(100 / 1000) #100 ms

#------------------------------------------------------------

if __name__ == '__main__':
	
	#Threading
	init_thread = threading.Thread(target=init)
	getIP_thread = threading.Thread(target=get_ip_address)
	#wingx_thread = threading.Thread(target=wingx)
	#wingy_thread = threading.Thread(target=wingy)
	eye_thread = threading.Thread(target=eyemovement)
	#blink_thread = threading.Thread(target=blinker)


	#Logic flow / main code

	#startup()
	init_thread.start()
	getIP_thread.start()
	#wingx_thread.start()
	#wingy_thread.start()
	eye_thread.start()
	#blink_thread.start()

#############################################################################################
