//DOIT ESP32 DEVKIT V1 is the board I used
#include <esp_now.h>
#include <WiFi.h>
#include <Adafruit_PWMServoDriver.h>
#include <Wire.h>
//PCA9685
bool Setup = false; // set this to false once you have set your servos
bool Monitor = false; // save the serial spam, turn to true for troubleshooting
String hostname = "Catcher";
int OKLED = 27;
bool isConnected = false;
unsigned long lastReceiveTime = 0;
unsigned long previousMillis = 0; 
unsigned long previousMillis1 = 0; 
const long interval1 = 12; //delay on neck tilting
unsigned long interval = random(2000, 5000); // generates a random number between 2000 and 5000
const unsigned long TIMEOUT_PERIOD = 5000; // Adjust the timeout period in milliseconds
float xSmoothed;
float ySmoothed;
float xPrev;
float yPrev;
int joyX; 
int joyY;
int mapX;
int mapY;
const int numSamples = 10;
bool mod1 = false;
bool mod2 = false;
bool mod3 = false;
bool mod4 = false;
// Servo name to number
int lLids = 0;
int lEyeX = 1;
int lEyeY = 2;
int rLids = 3;
int rEyeX = 4;
int rEyeY = 5;
int wingsX = 6;
int wingsL = 7;
int wingsR = 8;
int neckRotate = 9;
int neckX = 10;
int neckY =11;



// Structure example to receive data
// Must match the sender structure

typedef struct struct_message {

  int xpos;
  int ypos;
  bool mod1;
  bool mod2;
  bool mod3;
  bool mod4;

} struct_message;

// Create a struct_message called myData

struct_message myData;

// callback function that will be executed when data is received

void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  // Update lastReceiveTime
      lastReceiveTime = millis();

  memcpy(&myData, incomingData, sizeof(myData));

  if(Monitor == true){
    Serial.print("Bytes received: ");
    Serial.println(len);
  
    Serial.print("xpos: ");
    Serial.println(myData.xpos);
    Serial.print("ypos: ");
    Serial.println(myData.ypos);
   /* Serial.print("mod1: ");
    Serial.println(myData.mod1);
    Serial.print("mod2: ");
    Serial.println(myData.mod2);
    Serial.print("mod3: ");
    Serial.println(myData.mod3);
    Serial.print("mod4: ");
    Serial.println(myData.mod4);
    Serial.println();
    */
  }
}

// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

/*******************SERVOS
0 - lLids MG996R Servo
1 - lEyeX MG996R Servo
2 - lEyeY MG996R Servo
3 - rLids MG996R Servo
4 - rEyeX MG996R Servo
5 - rEyeY MG996R Servo
6 - wingsX MG996R Servo
7 - wingsL #DS3240 Servo
8 - wingsR #DS3240 Servo
9 - neckRotate MG996R Servo
10 - neckh MG996R Servo
11 - neckv MG996R Servo
*/

// this accounts for both types of servo but doesn't seem to work with Arduino code?
//#define SERVOMIN  600 // this is the 'minimum' pulse length count (out of 4096)
//#define SERVOMAX  2500 // this is the 'maximum' pulse length count (out of 4096)

#define SERVOMIN  125 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  590 // this is the 'maximum' pulse length count (out of 4096)


void setup() {
//Sanity Delay
delay(500);

randomSeed(analogRead(0)); // Initialize random number generator

// Set hostname (not actually required)

  WiFi.setHostname(hostname.c_str()); //define hostname

// Set device as a Wi-Fi Station

  WiFi.mode(WIFI_STA);



//initialise servos
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates

Serial.begin(115200);

  //set all servos to default neutral 90
  Serial.println("Homing Servos");
  for (int i = 2; i <=5; i++){ 
    pwm.setPWM(i,0,angleToPulse(90));
  }
    for (int i = 8; i <=15; i++){ 
    pwm.setPWM(i,0,angleToPulse(90));
  }

    pwm.setPWM(rLids,0,angleToPulse(80)); 
    pwm.setPWM(lLids,0,angleToPulse(80)); 
    
delay(800);
          
//set pin modes
  pinMode(OKLED,OUTPUT);

//init led
  digitalWrite(OKLED,LOW);


/*
//////////////////TASK PRIORITY

Causes crash 

xTaskCreate(
   EYES,     // function name
  "EYES",  // task name
  1000,           // stack size
  NULL,           // task parameters
  1,              // priority (lower number = higher priority)
  NULL            // task handle
);
*/


// Init ESP-NOW

  if (esp_now_init() != ESP_OK) {

    Serial.println("Error initializing ESP-NOW");
    return;

  }



 
// Once ESPNow is successfully Init, we will register for recv CB to

// get recv packer info

  esp_now_register_recv_cb(OnDataRecv);

}
void loop() {

if (Setup == true){
    Monitor = true;
    Serial.println("Yo, it's the loop");
}
   
  if (Setup == false){  
    // If no packet has been received for TIMEOUT_PERIOD
    if (millis() - lastReceiveTime > TIMEOUT_PERIOD) {
      // Turn on OKLED
      digitalWrite(OKLED, HIGH);
      isConnected = false;
    } else {
      // Turn off OKLED
      digitalWrite(OKLED, LOW);
      isConnected = true;
    }
  
    // Check if the interval has passed
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      // Save the current time
      previousMillis = currentMillis;
  
      // Call the Blink function
      Blink();
  
      // Generate a new random interval
      interval = random(5000, 10000);
    }

  if (Setup == false){
    //Eyes();
    NeckTilt();
    //NeckTurn();
  }
 }
  if (Setup == true){
    //throw the manual positions you require the servo to sit for iniial setup
    //0 is clockwise, 180 is anti-clockwise


// for the Lids, Set to 90, centre servo horn, set bottom string to closed.
// move to 140, set top string to open.
    
    //pwm.setPWM(lLids,0,angleToPulse(150)); // 
    //pwm.setPWM(lEyeX,0,angleToPulse(90)); 
    //pwm.setPWM(lEyeY,0,angleToPulse(90));
    //pwm.setPWM(rLids,0,angleToPulse(150)); //
    //pwm.setPWM(rEyeX,0,angleToPulse(90));
    //pwm.setPWM(rEyeY,0,angleToPulse(90));
    pwm.setPWM(neckRotate,0,angleToPulse(90));
    pwm.setPWM(neckX,0,angleToPulse(90));
    pwm.setPWM(neckY,0,angleToPulse(90));
    Serial.println("Servos set to setup angles");
    delay(7000);

    }

  
}


int angleToPulse(int ang){
   int pulse = map(ang,0, 180, SERVOMIN,SERVOMAX);// map angle of 0 to 180 to Servo min and Servo max 
  // Serial.print("Angle: ");Serial.print(ang);
//   Serial.print(" pulse: ");Serial.println(pulse);
   return pulse;
}

void Eyes(){

// joystick postion to average and smooth
   joyX = myData.xpos;
   joyY = myData.ypos;

 // Check if joystick values are within the dead zone
  if (joyX > 1835 && joyX < 1940) {
    mapX = 90;
  } else {
    // manually mapping joystick range to angle
    mapX = map(joyX,0,4095,0,180);
  }

  if (joyY > 1800 && joyY < 1895) {
    mapY = 90;
  } else {
    mapY = map(joyY,0,4095,0,180);
  }

// if too slow, mess with these ratios (need to = 1 in total)
   xSmoothed = (mapX *0.3) + (xPrev * 0.7);
   ySmoothed = (mapY *0.3) + (yPrev * 0.7);

   xPrev = xSmoothed;
   yPrev = ySmoothed;

// Left Eye Movement
  pwm.setPWM(lEyeX,0,angleToPulse(xSmoothed)); 
  pwm.setPWM(lEyeY,0,angleToPulse(ySmoothed)); 
  
//Right Eye Movement  
  pwm.setPWM(rEyeX,0,angleToPulse(xSmoothed));
  pwm.setPWM(rEyeY,0,angleToPulse(ySmoothed));
  

}

void NeckTilt(){

  unsigned long currentMillis1 = millis(); // had to use this to slow things down else it was too fast
  
  if (currentMillis1 - previousMillis1 >= interval1) {
    previousMillis1 = currentMillis1;
    
// joystick postion to average and smooth
   joyX = myData.xpos;
   joyY = myData.ypos;
  // Check if joystick values are within the dead zone
  if (joyX > 1835 && joyX < 1940) {
    mapX = 90;
  } else {
    // manually mapping joystick range to angle
    mapX = map(joyX,0,4095,0,180);
  }

  if (joyY > 1800 && joyY < 1895) {
    mapY = 90;
  } else {
    mapY = map(joyY,0,4095,0,180);
  }

// if too slow, mess with these ratios (need to = 1 in total)
// TBH, I didn't really see any difference when messing around with these.
   xSmoothed = (mapX *0.03) + (xPrev * 0.97);
   ySmoothed = (mapY *0.03) + (yPrev * 0.97);
   

   xPrev = xSmoothed;
   yPrev = ySmoothed;

  pwm.setPWM(neckX,0,angleToPulse(xSmoothed)); 
  pwm.setPWM(neckY,0,angleToPulse(ySmoothed)); 
 // Serial.println(xSmoothed);

  }
}


void NeckTurn(){

// joystick postion to average and smooth
   joyX = myData.xpos;
  // Check if joystick values are within the dead zone
  if (joyX > 1835 && joyX < 1940) {
    mapX = 90;
  } else {
    // manually mapping joystick range to angle
    mapX = map(joyX,0,4095,0,180);
  }

// if too slow, mess with these ratios (need to = 1 in total)
   xSmoothed = (mapX *0.3) + (xPrev * 0.7);
 
   xPrev = xSmoothed;

 pwm.setPWM(neckRotate,0,angleToPulse(xSmoothed)); 



}

void Blink() {

        pwm.setPWM(lLids, 0, angleToPulse(80)); 
        pwm.setPWM(rLids, 0, angleToPulse(80)); 
        delay(400);
        pwm.setPWM(lLids, 0, angleToPulse(150)); 
        pwm.setPWM(rLids, 0, angleToPulse(150)); 
        delay(400);
}
