/*

  Rui Santos

  Complete project details at https://RandomNerdTutorials.com/esp-now-esp32-arduino-ide/

 

  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files.

 

  The above copyright notice and this permission notice shall be included in all

  copies or substantial portions of the Software.

*/

 

#include <esp_now.h>

#include <WiFi.h>

String hostname = "Pitcher";

#define JOY_X_PIN 39
#define JOY_Y_PIN 36
int buttonPins[] = {27,26,25,33};
bool buttonState[] = {false, false, false, false};
bool lastButtonState[] = {HIGH, HIGH, HIGH, HIGH};
bool mod1;
bool mod2;
bool mod3;
bool mod4;

// REPLACE WITH YOUR RECEIVER MAC Address

uint8_t broadcastAddress[] = {0x08, 0xD1, 0xF9, 0xC8, 0xE6, 0xB8};
//08:D1:F9:C8:E6:B8
 

// Structure example to send data

// Must match the receiver structure

typedef struct struct_message {

  int xpos;
  int ypos;
  bool mod1Toggle;
  bool mod2Toggle;
  bool mod3Toggle;
  bool mod4Toggle;

} struct_message;

 

// Create a struct_message called myData

struct_message myData;

 

esp_now_peer_info_t peerInfo;

 

// callback when data is sent

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {

  Serial.print("\r\nLast Packet Send Status:\t");

  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");

}

void setup() {

  // Init Serial Monitor

  Serial.begin(115200);

  WiFi.setHostname(hostname.c_str()); //define hostname
  
  // Set device as a Wi-Fi Station

  WiFi.mode(WIFI_STA);

 

  // Init ESP-NOW

  if (esp_now_init() != ESP_OK) {

    Serial.println("Error initializing ESP-NOW");

    return;

  }

 

  // Once ESPNow is successfully Init, we will register for Send CB to

  // get the status of Transmitted packet

  esp_now_register_send_cb(OnDataSent);


// Register peer

  memcpy(peerInfo.peer_addr, broadcastAddress, 6);

  peerInfo.channel = 0; 

  peerInfo.encrypt = false;

 

  // Add peer       

  if (esp_now_add_peer(&peerInfo) != ESP_OK){

    Serial.println("Failed to add peer");

    return;

  }

}


void loop() {

  // Set values to send
  myData.xpos = analogRead(JOY_X_PIN);
  myData.ypos = analogRead(JOY_Y_PIN);

  for (int i = 0; i < 4; i++) {
    bool currentButtonState = digitalRead(buttonPins[i]);
    if (currentButtonState != lastButtonState[i] && currentButtonState == LOW) {
      buttonState[i] = !buttonState[i];
      delay(10); // debounce
    }
    lastButtonState[i] = currentButtonState;
  }

  // Update the mod variables based on the button states
  myData.mod1Toggle = buttonState[0];
  myData.mod2Toggle = buttonState[1];
  myData.mod3Toggle = buttonState[2];
  myData.mod4Toggle = buttonState[3];

  // Print the values of myData
  Serial.print("xpos: ");
  Serial.println(myData.xpos);
  Serial.print("ypos: ");
  Serial.println(myData.ypos);
  Serial.print("mod1Toggle: ");
  Serial.println(myData.mod1Toggle);
  Serial.print("mod2Toggle: ");
  Serial.println(myData.mod2Toggle);
  Serial.print("mod3Toggle: ");
  Serial.println(myData.mod3Toggle);
  Serial.print("mod4Toggle: ");
  Serial.println(myData.mod4Toggle);

  // Send message via ESP-NOW

  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));

  
  if (result == ESP_OK) {

    Serial.println("Sent with success");

  }

  else {

    Serial.println("Error sending the data");

  }

  delay(200);
}
